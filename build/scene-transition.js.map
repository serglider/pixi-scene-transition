{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SceneTransition.js","webpack:///./src/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;;AAEf;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACjJA;AAAA;AAAgD;;AAEhD;AACA;AACA;;AAEA,8BAA8B,wDAAe,C","file":"scene-transition.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/build/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default class SceneTransition {\r\n\r\n    constructor(renderer, TWEEN) {\r\n        this._ticker = new PIXI.ticker.Ticker();\r\n        this._ticker.stop();\r\n        this._ticker.add(() => {\r\n            TWEEN.update();\r\n        });\r\n        this._TWEEN = TWEEN;\r\n        this._renderer = renderer;\r\n    }\r\n\r\n    createTransition(fromView, toView, data) {\r\n\r\n        const isFrom = SceneTransition.getTransitionType(data);\r\n        let container1, container2;\r\n        if (!isFrom) {\r\n            container1 = fromView;\r\n            container2 = toView;\r\n        } else {\r\n            container1 = toView;\r\n            container2 = fromView;\r\n        }\r\n        const toIndex = container2.parent.getChildIndex(container2);\r\n        const transitionContainer = new PIXI.Container();\r\n        container2.parent.addChildAt(transitionContainer, toIndex + 1);\r\n        transitionContainer.visible = false;\r\n        container1.visible = true;\r\n        const tweens = data.map(item => {\r\n            const sprite = this._getSprite(container1, item.anchor, item.bounds, item.from);\r\n            if (item.from) {\r\n                item.to = {\r\n                    x: item.bounds[0] + item.bounds[2] * sprite.anchor.x,\r\n                    y: item.bounds[1] + item.bounds[3] * sprite.anchor.y,\r\n                    alpha: 1,\r\n                    rotation: 0,\r\n                    scale: 1\r\n                };\r\n            }\r\n            transitionContainer.addChild(sprite);\r\n            return this._createTween(sprite, item);\r\n        });\r\n\r\n        return {\r\n            start: () => {\r\n                container1.visible = false;\r\n                transitionContainer.visible = true;\r\n                container2.visible = true;\r\n                this._ticker.start();\r\n                const promises = tweens.map(this._startTween);\r\n                return Promise.all(promises).then(() => {\r\n                    if (isFrom) {\r\n                        container1.visible = true;\r\n                        container2.visible = false;\r\n                    }\r\n                    this._ticker.stop();\r\n                    transitionContainer.destroy(true);\r\n                    return Promise.resolve();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    _startTween(tw) {\r\n        return new Promise(resolve => {\r\n            tw.onComplete(resolve).start();\r\n        });\r\n    }\r\n\r\n    _createTween(sprite, data) {\r\n        const tweenKeys = Object.keys(data.to);\r\n        const tweenObj = tweenKeys.reduce(addToTweenObj, {});\r\n        const delay = data.delay || 0;\r\n        const easing = data.easing || this._TWEEN.Easing.Linear.None;\r\n        return new this._TWEEN.Tween(tweenObj)\r\n                        .to(data.to, data.duration)\r\n                        .onUpdate(update)\r\n                        .delay(delay)\r\n                        .easing(easing);\r\n\r\n        function addToTweenObj(obj, key) {\r\n            if (key === 'scale') {\r\n                obj[key] = data.from && ('scale' in data.from) ? data.from.scale : 1;\r\n            } else {\r\n                obj[key] = sprite[key];\r\n            }\r\n            return obj;\r\n        }\r\n\r\n        function update() {\r\n            tweenKeys.forEach(key => {\r\n                if (key === 'scale') {\r\n                    sprite.scale.set(tweenObj[key]);\r\n                } else {\r\n                    sprite[key] = tweenObj[key];\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _getSprite(view, anchor, bounds, fromObj) {\r\n        const texture = this._renderer.generateTexture(view, 0, 1, new PIXI.Rectangle(...bounds));\r\n        const sprite = new PIXI.Sprite(texture);\r\n        if (anchor) {\r\n            sprite.anchor.set(anchor);\r\n        }\r\n        if (fromObj) {\r\n            Object.keys(fromObj).forEach(key => {\r\n                if (key === 'scale') {\r\n                    sprite.scale.set(fromObj[key]);\r\n                } else {\r\n                    sprite[key] = fromObj[key];\r\n                }\r\n            });\r\n        } else {\r\n            sprite.x = bounds[0] + bounds[2] * sprite.anchor.x;\r\n            sprite.y = bounds[1] + bounds[3] * sprite.anchor.y;\r\n        }\r\n\r\n\r\n        return sprite;\r\n    }\r\n\r\n    static getTransitionType(list) {\r\n        return list.every(item => item.from);\r\n    }\r\n\r\n    static getRegions({width, height}, dims = [1, 1]) {\r\n        const [columns, rows] = dims;\r\n        if (!columns || !rows) return [];\r\n        const h = Math.ceil(height / rows);\r\n        const w = Math.ceil(width / columns);\r\n        return Array.from(Array(columns * rows), getBounds);\r\n\r\n        function getBounds(_, i) {\r\n            const x = i % columns * w;\r\n            const y = Math.floor(i / columns) * h;\r\n            return [x, y, w, h];\r\n        }\r\n    }\r\n}\r\n\r\nSceneTransition.TYPES = {\r\n    OUT: 0,\r\n    IN: 1\r\n};\r\n","import SceneTransition from \"./SceneTransition\";\r\n\r\nif (!PIXI) {\r\n    throw new Error('foobar');\r\n}\r\n\r\nPIXI.SceneTransitionManager = SceneTransition;"],"sourceRoot":""}